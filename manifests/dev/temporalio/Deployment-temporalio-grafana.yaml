apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: temporalio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 11.0.0
    helm.sh/chart: grafana-8.0.2
  name: temporalio-grafana
  namespace: temporal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: temporalio
      app.kubernetes.io/name: grafana
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 03fa36344a3d4a834f38288823ce23e4cb7f43458c1436abe1ec448b1303f28c
        checksum/dashboards-json-config: ec86803c73ad8794ad1d5dcfac1ae831c397f9baeb2b72a7bff17e30538f6b83
        checksum/sc-dashboard-provider-config: e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24
        checksum/secret: 98ac6fc087ec8e9fe41b751b30f681da631e510094e2f6aa6c876a979771a83d
        kubectl.kubernetes.io/default-container: grafana
      labels:
        app.kubernetes.io/instance: temporalio
        app.kubernetes.io/name: grafana
    spec:
      automountServiceAccountToken: true
      containers:
        - env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: admin-user
                  name: temporalio-grafana
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: admin-password
                  name: temporalio-grafana
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          image: docker.io/grafana/grafana:11.0.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          name: grafana
          ports:
            - containerPort: 3000
              name: grafana
              protocol: TCP
            - containerPort: 9094
              name: gossip-tcp
              protocol: TCP
            - containerPort: 9094
              name: gossip-udp
              protocol: UDP
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /etc/grafana/grafana.ini
              name: config
              subPath: grafana.ini
            - mountPath: /var/lib/grafana
              name: storage
            - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
              name: config
              subPath: datasources.yaml
            - mountPath: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
              name: config
              subPath: dashboardproviders.yaml
      enableServiceLinks: true
      initContainers:
        - args:
            - -c
            - mkdir -p /var/lib/grafana/dashboards/default && /bin/sh -x /etc/grafana/download_dashboards.sh
          command:
            - /bin/sh
          image: docker.io/curlimages/curl:7.85.0
          imagePullPolicy: IfNotPresent
          name: download-dashboards
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /etc/grafana/download_dashboards.sh
              name: config
              subPath: download_dashboards.sh
            - mountPath: /var/lib/grafana
              name: storage
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      serviceAccountName: temporalio-grafana
      volumes:
        - configMap:
            name: temporalio-grafana
          name: config
        - configMap:
            name: temporalio-grafana-dashboards-default
          name: dashboards-default
        - emptyDir: {}
          name: storage
